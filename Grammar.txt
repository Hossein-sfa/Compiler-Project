Goal -> (Expr;)*

Expr -> Define | Equation | Condition | Loop

Define -> int ID(, ID)* | int ID(, ID)* = Expression(, Expression)*

Condition -> if (Expression) (CompOp) (Expression): IF

IF-> begin (Equation)+ end ((Elif)* |(Elif)* Else)

Elif -> elif C : begin (Equation;)* end

Else -> else : begin (Equation;)* end

C -> Expression ((and | or) Expression)*

Loop -> loopc C : begin (Equation;)* end

ID -> (a-z | A-Z)+

Expression -> Term((+|-)Term)*

Term -> Factor((*|/|%)Factor)*

Factor -> Final((^)Final)*

Num -> 0 | (1-9)((0-9))* | -(1-9)((0-9))* 

Op -> -= | += | *= | \= | %= | =

Equation -> (ID) (Op) (Expression)

CompOp -> (<= | >= | == | != | > | <)

Final -> ID | Num | (Expression)