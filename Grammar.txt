Goal -> (Expr;)*

Expr -> Define | Assignment | Condition | Loop

Define -> int ID(, ID)* | int ID(, ID)* = Expression(, Expression)*

Condition -> (if) (Expression) (CompOp) (Expression): (IF) ((elif) (C): IF)* ((else): IF)

IF-> begin (Assignment)+ end 

C -> Expression ((and | or) Expression)*

Loop -> loopc C : begin (Assignment;)* end

ID -> (a-z | A-Z)+

Expression -> Term((+|-)Term)*

Term -> Factor((*|/|%)Factor)*

Factor -> Final((^)Final)*

Num -> 0 | (1-9)((0-9))* | -(1-9)((0-9))* 

Op -> -= | += | *= | \= | %= | =

Assignment -> (ID) (Op) (Expression)

CompOp -> (<= | >= | == | != | > | <)

Final -> ID | Num | (Expression)